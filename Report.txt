Christian Glatz
Space Invaders: Vertical Uprise
Project Report

	I worked on this project with a partner, Sorbarikor Inene. To prepare for this project we met over Zoom or a phone call multiple times. The very first discussion we had, we decided what kind of project we wanted to undertake and what the basic plot of our game might look like. We decided we wanted to do an original turn based RPG with weapons and aliens. After we decided on this, we met again and went down the list of requirements and thought of ways we could fulfill each requirement. It was also at this time that we started writing a basic outline of the tasks we would have to undertake to finish this game. By the time we started coding, we had a good idea of what our game should look like, where we would fulfill each requirement, and how much time it would take to finish the project.
	Our code skeleton was developed over Zoom. We each worked on an item and then shared our code and worked together to make sure our code skeletons fulfilled the requirements that had been outlined. The code skeletons began on google docs, where we made a file and listed each of the data members and member functions each class should have and how our code should run. After that step, we began work on the code skeleton on AWS. We used our code skeleton for the first submission and later on as an outline for the rest of our program.
	We could have finished the project more efficiently if we had made a more structured schedule of our progress at the beginning of the project. A schedule would have ensured that we would have had plenty of time to spare and had more similar work loads on each day throughout the process. We could have also made a more structured outline of the story of our game. We left our plot rather open ended after we had laid out a basic idea of what it was. Had we made a more detailed plot and completed our story in the beginning, we would have had a better outline for how we should program our main driver.
       We ran into a problem with our inventory management code. Our inventory consisted of an array of five “item” objects. These items could be changed throughout the game. Our original idea was to make it so that one could pick up an item, drop an item, and replace an item. However, as we were coding the part where one could drop an item it became increasingly difficult. In this scenario, it was difficult to decide how an empty slot would be created in the array without a segmentation fault we were constantly getting. Eventually, we came to the conclusion that it would be just as effective to have a set of options where one could pick up an item and replace an item. These options would still allow one to drop an item in lieu for an item that was currently available. Had we looked ahead in how our code would have worked and decided to use a vector for this part of code, it probably could have been done without as much of a hassle. In the end, the code worked just as well since one still had the option to pick up a weapon even if one’s inventory was full through the replace item member function.
